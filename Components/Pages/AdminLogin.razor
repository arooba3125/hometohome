@page "/admin-login"
@rendermode InteractiveServer
@using HomeToHome.Services
@inject AdminService AdminService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<style>
    .background-container {
        position: relative;
        width: 100%;
        height: 100vh;
        overflow: hidden;
        font-family: 'Segoe UI', sans-serif;
    }

    .background-image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        z-index: 0;
        filter: brightness(0.85);
    }

    .content-overlay {
        position: relative;
        z-index: 1;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
    }

    .login-card {
        background-color: rgba(255, 255, 255, 0.7);
        border-radius: 1.5rem;
        padding: 2rem;
        width: 100%;
        max-width: 450px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        animation: fadeInSlide 0.7s ease-out forwards;
    }

    h3 {
        color: black;
        font-weight: bold;
        margin-bottom: 1.5rem;
        text-align: center;
        animation: fadeIn 1.2s ease-in-out;
    }

    .form-control {
        border-radius: 0.5rem;
    }

        .form-control:focus {
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
            border-color: #0d6efd;
        }

    .btn-submit {
        width: 100%;
        background-color: #2d2d2d;
        color: white;
        border: none;
        border-radius: 25px;
        padding: 12px;
        font-size: 16px;
        transition: 0.3s ease;
    }

        .btn-submit:hover {
            background-color: #000;
            transform: scale(1.02);
        }

    .alert {
        width: 100%;
        max-width: 450px;
        margin: 1rem auto 0;
        background: #f8d7da;
        color: #721c24;
        padding: 10px;
        border-radius: 5px;
        text-align: center;
    }

    .text-danger {
        font-size: 0.9rem;
        color: #e74c3c;
    }

    @@keyframes fadeInSlide {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }
</style>

<div class="background-container">
    <img src="/images/AdminLogin.webp" alt="Background" class="background-image" />
    <div class="content-overlay">
        <div class="login-card">
            <h3>Admin Login</h3>
            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert" role="alert">
                        @errorMessage
                        <button @onclick="() => errorMessage = null" style="margin-left: 10px; border: none; background: none; color: #721c24; cursor: pointer;">Dismiss</button>
                    </div>
                }
                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <InputText @bind-Value="loginModel.Email" class="form-control" placeholder="Enter email" />
                    <ValidationMessage For="@(() => loginModel.Email)" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Password</label>
                    <InputText type="password" @bind-Value="loginModel.Password" class="form-control" placeholder="Enter password" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>
                <button type="submit" class="btn-submit">Login</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        try
        {
            var isAuthenticated = await AdminService.AuthenticateAdminAsync(loginModel.Email, loginModel.Password);
            if (isAuthenticated)
            {
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "adminEmail", loginModel.Email);
                NavigationManager.NavigateTo("/admin-panel");
            }
            else
            {
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
        }
    }
}