@page "/worker-profile-view"
@rendermode InteractiveServer
@inject WorkerService WorkerService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<style>
    body {
        font-family: 'Segoe UI', 'Inter', sans-serif;
        background: url('/images/WorkerProfileView.webp') no-repeat center center fixed;
        background-size: cover;
        margin: 0;
        padding: 0;
        color: #2d2d2d;
    }

    .container {
        max-width: 800px;
        margin: 60px auto;
        padding: 20px;
    }

    .profile-card {
        background: rgba(255, 255, 255, 0.85);
        border-radius: 16px;
        padding: 40px;
        box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        animation: fadeIn 0.6s ease-in-out;
    }

    .profile-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 20px 50px rgba(0, 0, 0, 0.15);
    }

    .profile-header {
        text-align: center;
        margin-bottom: 30px;
    }

    .profile-header h2 {
        font-size: 32px;
        font-weight: 700;
        color: #2c3e50;
        margin-bottom: 10px;
    }

    .profile-header .email {
        font-size: 18px;
        color: #555;
        word-break: break-word;
    }

    .section-title {
        font-size: 22px;
        font-weight: 600;
        color: #2c3e50;
        margin: 20px 0 15px;
        border-bottom: 2px solid #3498db;
        padding-bottom: 5px;
    }

    .profile-details {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    .detail-item {
        background: rgba(255, 255, 255, 0.95);
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        transition: transform 0.2s ease;
    }

    .detail-item:hover {
        transform: translateY(-2px);
    }

    .detail-item label {
        font-size: 14px;
        font-weight: 500;
        color: #555;
        display: block;
        margin-bottom: 5px;
    }

    .detail-item span {
        font-size: 16px;
        font-weight: 600;
        color: #2d2d2d;
    }

    .skill-chips {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
    }

    .skill-chip {
        background: #ffffff;
        color: #000000;
        border-radius: 15px;
        padding: 6px 14px;
        font-size: 13px;
        border: 1px solid #ccc;
        transition: transform 0.2s ease;
    }


    .skill-chip:hover {
        transform: scale(1.05);
        background: #000000;
        }

    .button-group {
        display: flex;
        justify-content: center;
        gap: 15px;
        margin-top: 30px;
    }

    .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .btn-back {
        background: #636e72;
        color: #fff;
    }

    .btn-back:hover {
        background: #2d3436;
        transform: translateY(-2px);
        box-shadow: 0 2px 8px rgba(99, 110, 114, 0.3);
    }

    .btn-edit {
        background: #3498db;
        color: #fff;
    }

    .btn-edit:hover {
        background: #2980b9;
        transform: translateY(-2px);
        box-shadow: 0 2px 8px rgba(52, 152, 219, 0.3);
    }

    .alert-info {
        background-color: #e3f2fd;
        border: 1px solid #90caf9;
        padding: 18px;
        color: #1565c0;
        border-radius: 12px;
        text-align: center;
        font-weight: 600;
        margin-bottom: 20px;
    }

    @@keyframes fadeIn {
        0% {
            opacity: 0;
            transform: translateY(10px);
        }
        100% {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@media (max-width: 768px) {
        .profile-details {
            grid-template-columns: 1fr;
        }

        .container {
            margin: 20px;
            padding: 10px;
        }

        .profile-card {
            padding: 20px;
        }
    }
</style>

<div class="container">
    <div class="profile-card">
        @if (worker != null)
        {
            <div class="profile-header">
                <h2>@worker.FirstName @worker.LastName</h2>
                <p class="email">@worker.Email</p>
            </div>

            <div class="section-title">Personal Information</div>
            <div class="profile-details">
                <div class="detail-item">
                    <label>First Name</label>
                    <span>@worker.FirstName</span>
                </div>
                <div class="detail-item">
                    <label>Last Name</label>
                    <span>@worker.LastName</span>
                </div>
                <div class="detail-item">
                    <label>Date of Birth</label>
                    <span>@(worker.DateOfBirth?.ToString("MMMM dd, yyyy") ?? "N/A")</span>
                </div>
                <div class="detail-item">
                    <label>Gender</label>
                    <span>@worker.Gender</span>
                </div>
            </div>

            <div class="section-title">Contact Information</div>
            <div class="profile-details">
                <div class="detail-item">
                    <label>Email</label>
                    <span>@worker.Email</span>
                </div>
                <div class="detail-item">
                    <label>Phone Number</label>
                    <span>@worker.PhoneNumber</span>
                </div>
            </div>

            <div class="section-title">Professional Details</div>
            <div class="profile-details">
                <div class="detail-item">
                    <label>Designation</label>
                    <span>@worker.Designation</span>
                </div>
                <div class="detail-item">
                    <label>Experience</label>
                    <span>@(worker.Experience.HasValue ? $"{worker.Experience} year(s)" : "N/A")</span>
                </div>
                <div class="detail-item">
                    <label>Preferred Working Hours</label>
                    <span>@worker.PreferredWorkingHours</span>
                </div>
                <div class="detail-item">
                    <label>Skills</label>
                    <div class="skill-chips">
                        @foreach (var skill in worker.Skills)
                        {
                            <span class="skill-chip">@skill</span>
                        }
                    </div>
                </div>
            </div>

            <div class="section-title">Address</div>
            <div class="profile-details">
                <div class="detail-item">
                    <label>City</label>
                    <span>@worker.City</span>
                </div>
                <div class="detail-item">
                    <label>Full Address</label>
                    <span>@worker.FullAddress</span>
                </div>
                <div class="detail-item">
                    <label>CNIC</label>
                    <span>@worker.CNIC</span>
                </div>
            </div>

            <div class="button-group">
                <button class="btn btn-back" @onclick="NavigateToDashboard">Back to Dashboard</button>
                <button class="btn btn-edit" @onclick="NavigateToEditProfile">Edit Profile</button>
            </div>
        }
        else
        {
            <div class="alert-info">Worker profile not found.</div>
        }
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string Email { get; set; } = string.Empty;

    private Worker? worker;
    private bool _isInitialized;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Email))
        {
            var uri = new Uri(NavigationManager.Uri);
            Email = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("email") ?? string.Empty;
        }

        if (!string.IsNullOrEmpty(Email))
        {
            worker = await WorkerService.GetWorkerByEmailAsync(Email);
        }

        _isInitialized = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_isInitialized && firstRender)
        {
            if (string.IsNullOrEmpty(Email))
            {
                Email = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userEmail") ?? string.Empty;
                if (!string.IsNullOrEmpty(Email))
                {
                    worker = await WorkerService.GetWorkerByEmailAsync(Email);
                    StateHasChanged();
                }
            }

            if (!string.IsNullOrEmpty(Email))
            {
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "userEmail", Email);
            }
        }
    }

    private void NavigateToDashboard()
    {
        NavigationManager.NavigateTo($"/worker-page?email={Uri.EscapeDataString(Email)}");
    }

    private void NavigateToEditProfile()
    {
        NavigationManager.NavigateTo($"/worker-profile?email={Uri.EscapeDataString(Email)}");
    }
}