@page "/userregister"
@rendermode InteractiveServer
@using HomeToHome.Models
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager


<div class="container mt-5 fade-in">
    <div class="row justify-content-center align-items-center shadow-lg rounded-4 overflow-hidden" style="background: #fff;">

        <!-- Image Section -->
        <div class="col-md-6 d-none d-md-block p-0">
            <img src="/images/UserRegistrationForm_Image.webp" alt="User Registration" class="img-fluid h-100 w-100 object-fit-cover" style="object-fit: cover;">
        </div>

        <!-- Form Section -->
        <div class="col-md-6 p-5">
            <h2 class="text-center mb-4">Create Your Account</h2>
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success text-center" role="alert">
                    @successMessage
                </div>
            }


            <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row">
                    <h4 class="mt-3">Personal Information</h4>
                    <div class="col-md-6 mb-3">
                        <label>First Name</label>
                        <InputText @bind-Value="user.FirstName" class="form-control" />
                        <ValidationMessage For="@(() => user.FirstName)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label>Last Name</label>
                        <InputText @bind-Value="user.LastName" class="form-control" />
                        <ValidationMessage For="@(() => user.LastName)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label>Email Address</label>
                        <InputText @bind-Value="user.Email" class="form-control" />
                        <ValidationMessage For="@(() => user.Email)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label>Phone Number</label>
                        <InputText @bind-Value="user.PhoneNumber" class="form-control" />
                        <ValidationMessage For="@(() => user.PhoneNumber)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label>Date of Birth</label>
                        <InputDate @bind-Value="user.DateOfBirth" class="form-control" />
                        <ValidationMessage For="@(() => user.DateOfBirth)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label>Gender</label>
                        <InputSelect @bind-Value="user.Gender" class="form-control">
                            <option value="">-- Select --</option>
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                            <option value="Other">Other</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => user.Gender)" />
                    </div>
                </div>

                <div class="row">
                    <h4 class="mt-4">Location & Security</h4>

                    <div class="col-md-6 mb-3">
                        <label>City</label>
                        <InputText @bind-Value="user.City" class="form-control" />
                        <ValidationMessage For="@(() => user.City)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label>Full Address</label>
                        <InputTextArea @bind-Value="user.FullAddress" class="form-control" />
                        <ValidationMessage For="@(() => user.FullAddress)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label>CNIC Number</label>
                        <InputText @bind-Value="user.CNIC" class="form-control" />
                        <ValidationMessage For="@(() => user.CNIC)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label>Password</label>
                        <InputText type="password" @bind-Value="user.Password" class="form-control" />
                        <ValidationMessage For="@(() => user.Password)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label>Confirm Password</label>
                        <InputText type="password" @bind-Value="user.ConfirmPassword" class="form-control" />
                        <ValidationMessage For="@(() => user.ConfirmPassword)" />
                    </div>
                </div>

                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-primary btn-lg w-100">Register</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<style>
    .fade-in {
        animation: fadeInSlide 0.7s ease-out forwards;
    }

    .form-control:focus {
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        border-color: #0d6efd;
    }

    .btn-primary {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

        .btn-primary:hover {
            background-color: #0b5ed7;
            border-color: #0a58ca;
            transform: scale(1.02);
            transition: all 0.2s ease-in-out;
        }

    @@keyframes fadeInSlide {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

@code {
    private string successMessage = string.Empty;

    private User user = new User();

    [Inject]
    private UserService UserService { get; set; }

    private async Task HandleValidSubmit()
    {
        try
        {
            await UserService.RegisterUserAsync(user);

            // Set success message
            successMessage = "Registration successful! Redirecting to login...";

            StateHasChanged();


            await Task.Delay(2000);


            NavigationManager.NavigateTo("/login");


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");

        }
    }



}